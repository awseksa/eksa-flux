apiVersion: batch/v1
kind: Job
metadata:
  name: export-kubeconfig
  namespace: eksa-system
spec:
  template:
    spec:
      containers:
      - name: export-kubeconfig
        image: server:v1.3  # Use an image that has kubectl
        env:
        - name: SECRET_NAME
          value: "eksa-workload-01-kubeconfig"  # Set your secret name here
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Retrieving kubeconfig from secret ${SECRET_NAME}..."
            kubectl get secret -n eksa-system ${SECRET_NAME} -o jsonpath='{.data.value}' | base64 --decode > /output/w01.kubeconfig
            echo "Kubeconfig saved to /output/w01.kubeconfig"


            KC=/output/w01.kubeconfig
            FV=2.3.0
            GT=$(kubectl get secret my-token-secret -o jsonpath='{.data.token}' | base64 --decode)
            GN=awseksa
            GR=eksa-repo
            GB=aws-eksaflux
            GP=./clusters/eksa-workload-01/

            export KUBECONFIG=$KC

            check_fluxb_installed_on_machine() {
            flux --version
            }

            if check_fluxb_installed_on_machine; then
            echo "Flux binary file is arleady installed on your machine"
            else
                echo "Note: 2.2.0 is support for k8s v1.26 to v1.29"
              echo "Note: 2.3.0 is support for k8s v1.28 to v1.30"
              echo "Note: 2.4.0 is support for k8s v1.29 to v1.31"
              if [ $FV = '2.2.0' ]; then
                  curl -sLO https://github.com/fluxcd/flux2/releases/download/v2.2.0/flux_2.2.0_linux_amd64.tar.gz
                  tar -zxvf flux_2.2.0_linux_amd64.tar.gz
                  cp flux /usr/local/bin/
                  flux --version
              elif [ $FV = '2.3.0' ]; then
                  curl -sLO https://github.com/fluxcd/flux2/releases/download/v2.3.0/flux_2.3.0_linux_amd64.tar.gz
                  tar -zxvf flux_2.3.0_linux_amd64.tar.gz
                  cp flux /usr/local/bin/
                  flux --version
              elif [ $FV = '2.4.0' ]; then
                  curl -sLO https://github.com/fluxcd/flux2/releases/download/v2.4.0/flux_2.4.0_linux_amd64.tar.gz
                  tar -zxvf flux_2.4.0_linux_amd64.tar.gz
                  cp flux /usr/local/bin/
                  flux --version
              else
                  curl -s https://fluxcd.io/install.sh | sudo bash
                  flux --version
              fi
            fi

            echo "verify workload cluster with below output"
            kubectl get node -owide


            check_flux_installed_on_cluster() {
              kubectl get ns flux-system
            }

            if check_flux_installed_on_cluster; then
              echo "Flux is arleady integrated with your workload cluster, If required please uninstall and install again"
            else
              echo "===*_*====WorkFlow Started===*_*==="
              flux check --pre
              export EKSA_GITHUB_TOKEN=$GT
              export GITHUB_TOKEN=$GT
              flux bootstrap github --token-auth --owner=$GN --repository=$GR --branch=$GB --path=$GP --personal
              echo "Verifying Flux is integrated with workload cluster"
              duration = 10
                        while [ $duration -gt 0 ]; do
                            # Calculate minutes and seconds
                            minutes=$((duration / 60))
                            seconds=$((duration % 60))
                            # Print the time remaining in the same line
                            echo -ne "Time remaining: $minutes minutes and $seconds seconds\r"
                            # Wait for 1 second
                            sleep 1
                            # Decrement the duration by 1
                            ((duration--))
                        done
            kubectl get pods -n flux-system
            echo "===*_*====WorkFlow Completed===*_*==="
            fi

        volumeMounts:
        - name: output-volume
          mountPath: /output
      restartPolicy: Never
      volumes:
      - name: output-volume
        emptyDir: {}
